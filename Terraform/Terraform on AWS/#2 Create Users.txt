=====================
Creating  User in AWS
=====================

1. Create a User
Step 1: Sign in to your AWS Management Console.

Step 2: Navigate to the IAM dashboard.

Go to Services > IAM.
Step 3: Add a new user.

Click on Users in the left-hand menu.
Click the Add user button.
Step 4: Enter user details.

Type the username for the new user.
Select the type of access for the user:
Programmatic access: Select this if the user needs access to the AWS API, CLI, SDK, and other development tools.
AWS Management Console access: Select this if the user needs to access the AWS Management Console. Then, choose whether the user will have a custom password or auto-generated password.
Step 5: Click Next: Permissions.

2. Attach Policies or Add User to Groups
Step 1: Choose how to set permissions.

Add user to group: Add the user to one or more existing groups with predefined policies.
Copy permissions from existing user: Copy the permissions from another user.
Attach policies directly: Select policies to attach to the user directly.
Step 2: Add user to group.

If you chose Add user to group, select the groups you want to add the user to by checking the boxes next to the group names.
Step 3: Attach policies directly (if not adding to group).

If you chose to attach policies directly, search for the policies you want to attach.
Check the boxes next to the policies you want to attach to the user.
Step 4: Click Next: Tags.

3. Add Tags (Optional)
Step 1: Add metadata to the user by attaching tags.

Tags are key-value pairs you can use to manage, identify, and organize your resources.
Step 2: Click Next: Review.

4. Review and Create User
Step 1: Review the user details.

Ensure all the details are correct.
Step 2: Click Create user.

Step 3: Note the user’s credentials.

If you chose programmatic access, save the Access key ID and Secret access key securely.
If you chose console access, provide the user with their username and password.
5. Add User to Groups (if not done during user creation)
If you didn't add the user to a group during the user creation process, you can do it afterward.

Step 1: Go to the Users section in the IAM dashboard.

Click on the username of the newly created user.
Step 2: Go to the Groups tab.

Click the Add user to groups button.
Step 3: Select groups.

Check the boxes next to the groups you want to add the user to.
Step 4: Click the Add to groups button.

6. Verify User Access (Optional)
Step 1: Sign in as the new user.

Use the credentials provided to ensure the user can access the AWS resources as expected.
Step 2: Verify the policies and permissions are working correctly.

Example Policies
Here are some examples of common policies you might attach:

AdministratorAccess: Provides full access to AWS services and resources.
ReadOnlyAccess: Provides read-only access to AWS services and resources.
AmazonS3FullAccess: Provides full access to Amazon S3.

===============
Creating Roles 
===============

Creating roles in AWS IAM allows you to grant permissions to entities you trust, such as AWS services, applications, or users in other AWS accounts. Here’s how to create a role:

1. Sign in to the AWS Management Console
Go to the AWS Management Console.
Sign in with your credentials.
2. Navigate to IAM
From the AWS Management Console, go to Services.
Select IAM (Identity and Access Management) from the list.
3. Create a New Role
In the IAM dashboard, click on Roles in the left-hand menu.
Click the Create role button.
4. Select Trusted Entity
Choose the type of trusted entity:

AWS service: To grant permissions to an AWS service (e.g., EC2, Lambda).
Another AWS account: To grant permissions to users in another AWS account.
Web identity: To grant permissions to users authenticated through a web identity provider (e.g., Amazon, Facebook, Google).
SAML 2.0 federation: To grant permissions to users authenticated through a SAML 2.0 identity provider.
Select the specific service or entity. For example, if you choose AWS service, you need to select the service that will assume the role (e.g., EC2).

Click Next: Permissions.

5. Attach Permissions Policies
Attach permissions policies:
Select the policies you want to attach to the role.
You can use AWS managed policies, customer managed policies, or create a custom policy.
Check the boxes next to the policies you want to attach.
Click Next: Tags.
6. Add Tags (Optional)
Add tags:
Tags are key-value pairs that can help you manage, identify, and organize your roles.
Adding tags is optional.
Click Next: Review.
7. Review and Create Role
Review the role details:
Ensure that the trusted entity and attached policies are correct.
Enter a Role name and an optional Role description.
Click the Create role button.
8. Verify and Use the Role
After creating the role, it will appear in the Roles list.
You can now assign this role to AWS resources or entities as needed.
Example Use Cases
Assigning a Role to an EC2 Instance:
When launching an EC2 instance, in the IAM role section, select the role you created.
Assuming a Role from an AWS Lambda Function:
When creating or updating a Lambda function, in the Execution role section, select the role you created.

======================
Creating Custom Policy
======================

Creating a custom IAM policy in AWS allows you to specify precise permissions tailored to your needs. Here’s how to create a custom policy:

1. Sign in to the AWS Management Console
Go to the AWS Management Console.
Sign in with your credentials.
2. Navigate to IAM
From the AWS Management Console, go to Services.
Select IAM (Identity and Access Management) from the list.
3. Create a New Policy
In the IAM dashboard, click on Policies in the left-hand menu.
Click the Create policy button.
4. Define Permissions
You can create a policy using the Visual editor or by writing JSON.
Using the Visual Editor
Select a service: Choose the AWS service for which you want to define permissions (e.g., S3, EC2).
Specify actions: Select the actions that the policy allows or denies (e.g., s3:ListBucket, s3:GetObject).
Specify resources: Define the resources the actions apply to (e.g., specific S3 buckets or objects).
Add conditions: (Optional) Add conditions to control when the policy is in effect.
Writing JSON
Click on the JSON tab.

Enter your custom policy in JSON format. Here’s an example of a policy that allows listing and reading objects in a specific S3 bucket:

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::example-bucket"
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::example-bucket/*"
      ]
    }
  ]
}
5. Review and Create Policy
Click Next: Tags. (Adding tags is optional and helps organize and manage your policies.)
Click Next: Review.
Enter a Name and Description for your policy.
Review the policy details to ensure they are correct.
Click the Create policy button.
6. Attach the Custom Policy to a User, Group, or Role
Navigate to Users, Groups, or Roles in the IAM dashboard, depending on where you want to attach the policy.
Select the specific user, group, or role.
Go to the Permissions tab.
Click the Add permissions button.
Select Attach policies directly.
Search for and select the custom policy you created.
Click the Next: Review button and then Add permissions.
Example Use Case
Suppose you want to create a custom policy that allows an EC2 instance to read from a specific DynamoDB table. Here’s an example JSON policy for this:


{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:Query"
      ],
      "Resource": [
        "arn:aws:dynamodb:us-west-2:123456789012:table/ExampleTable"
      ]
    }
  ]
}
By following these steps, you can create and manage custom IAM policies tailored to your specific requirements. If you need further assistance or have more specific needs, feel free to ask!