We can have a single main.tf file which makes use of different/multiple providers

Eg:

main.tf
-------

resource "local_file" "pet"{
	filename = "/root/pets.txt"
	content = "we love pets"
}

resource "random_pet" "my_pet"{
	prefix = "Ms"
	seperator = "."
	length = "1"
}

In the example we are using two different providers here local and random

So: 

random_pet -> random indicates that we will be using the random provider here and the resource type is pet. 
			  this will generate a random pet name here

The "random" provider allows the use of randomness within Terraform configurations. This is a logical provider, which means that it works entirely within Terraform's logic, and doesn't interact with any other services.

We are using three examples in this argument:

prefix - which will prefix the random result
seperator - seperator will be added between the prefix and the random word generator
length - length indictates the number of random parameters created. 

the parameters created is based on the type of resource as we are using pet resource here a random pet name will be genrated every time the terraform apply will run. 



 terraform init output

------------------------------------------------------------------------------------ 

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/local from the dependency lock file
- Finding latest version of hashicorp/random...
- Using previously-installed hashicorp/local v2.5.1  ===================================> Since local is already installed it is using the already installed version
- Installing hashicorp/random v3.6.2...              ===================================> And since the random provider is not installed it is being installed
- Installed hashicorp/random v3.6.2 (signed by HashiCorp)

Terraform has made some changes to the provider dependency selections recorded
in the .terraform.lock.hcl file. Review those changes and commit them to your
version control system if they represent changes you intended to make.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

-------------------------------------------------------------------------------------


Make sure to run the terraform init every time a new provider is added (when working with multiple providers) as the init checks for new providers and adds them if not present other wise the provider will not be present during the plan phase and give error. 

out put for terraform apply
----------------------------

-----------------------------------------------------------------------------------------------

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.my_file will be created
  + resource "local_file" "my_file" {
      + content              = "Hi"
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "../PRO1/myfile.txt"
      + id                   = (known after apply)
    }

  # random_pet.my_pet will be created
  + resource "random_pet" "my_pet" {
      + id        = (known after apply)
      + length    = 1
      + prefix    = "Ms"
      + separator = "."
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

random_pet.my_pet: Creating...
local_file.my_file: Creating...
random_pet.my_pet: Creation complete after 0s [id=Ms.redbird]                                  =============> On running the apply the random pet was created
local_file.my_file: Creation complete after 0s [id=94dd9e08c129c785f7f256e82fbe0a30e6d1ae40]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.


Both the resources were created on running the terraform apply.

----------------------------------------------------------------------------------------------- 

For more arguments for random refer to:
https://registry.terraform.io/providers/hashicorp/random/latest/docs


In this manor we can use multiple providers in a single file